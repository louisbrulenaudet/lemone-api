import asyncio

from aiocache import cached
from fastapi import APIRouter

from app._exceptions import (
    ClassificationComputeError,
    EmbeddingComputeError,
    ModelRegistryNotFoundError,
)
from app.core.config import settings
from app.models.request_models import (
    ClassificationRequest,
    EmbeddingRequest,
    SimilarityRequest,
)
from app.models.response_models import (
    ClassificationResponse,
    EmbeddingResponse,
    SimilarityResponse,
)

router = APIRouter(tags=["sync"])


@router.post(
    "/embeddings",
    response_model=EmbeddingResponse,
    tags=["embeddings", "embedding", "embeddings-vector", "similarity-search"],
    description="Endpoint to generate text embeddings for a given input using a registered model.",
)
@cached(ttl=60)
async def embeddings(input_data: EmbeddingRequest) -> EmbeddingResponse:
    """
    Endpoint to generate text embeddings for a given input using a registered model.

    This endpoint allows clients to send input text along with the model name, and returns the corresponding embeddings generated by the specified model.
    """
    if settings.registry is not None:
        try:
            data = await asyncio.to_thread(
                settings.registry.get_model(input_data.model).encode, input_data.input
            )

        except Exception as exc:
            raise EmbeddingComputeError(details=exc) from exc

        return EmbeddingResponse(
            model=input_data.model,
            data=data,
        )
    else:
        raise ModelRegistryNotFoundError()


@router.post(
    "/similarity",
    response_model=SimilarityResponse,
    tags=["embeddings", "similarity", "semantic-similarity", "similarity-matrix"],
    description="Endpoint to compute the similarity between two multiple inputs using a registered model.",
)
@cached(ttl=60)
async def similarity(input_data: SimilarityRequest) -> SimilarityResponse:
    """
    Endpoint to compute the similarity between two text inputs using a registered model.

    This endpoint allows clients to send two input texts along with the model name, and returns the similarity scores matrix computed by the specified model.
    """
    if settings.registry is not None:
        try:
            data = await asyncio.to_thread(
                settings.registry.get_model(input_data.model).similarity,
                input_data.input,
            )

        except Exception as exc:
            raise EmbeddingComputeError(details=exc) from exc

        return SimilarityResponse(
            model=input_data.model,
            data=data,
        )
    else:
        raise ModelRegistryNotFoundError()


@router.post(
    "/classification",
    response_model=ClassificationResponse,
    tags=["classification", "router", "sequences-classification"],
    description="Endpoint to classify text inputs using a classification model.",
)
@cached(ttl=60)
async def classification(input_data: ClassificationRequest) -> ClassificationResponse:
    """
    Endpoint to classify text inputs using a classification model.

    This endpoint allows clients to send input text along with the model name, and returns the classification results computed by the specified model.
    """
    if settings.registry is not None:
        try:
            data = await asyncio.to_thread(
                settings.registry.get_model(input_data.model).classify, input_data.input
            )

        except Exception as exc:
            raise ClassificationComputeError(details=exc) from exc

        return ClassificationResponse(
            model=input_data.model,
            data=data,
        )
    else:
        raise ModelRegistryNotFoundError()
